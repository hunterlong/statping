name: Master Release
on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'

jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '1.14.2'
      - uses: actions/setup-node@v1
        with:
          node-version: '12.18.2'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - uses: actions/checkout@v2

      - name: Add GOBIN to PATH
        run: |
          echo "::add-path::$(go env GOPATH)/bin"
          echo ::set-env name=VERSION::$(cat version.txt)
        shell: bash

      - name: Font Awesome authentication
        env:
          FONTAWESOME_TOKEN: ${{ secrets.FONTAWESOME_TOKEN }}
        run: |
          npm config set "@fortawesome:registry" https://npm.fontawesome.com/
          npm config set "//npm.fontawesome.com/:_authToken" $FONTAWESOME_TOKEN

      - name: Install Global Dependencies
        run: npm install -g yarn sass cross-env

      - name: Download Frontend Dependencies
        if: steps.nodecache.outputs.cache-hit != 'true'
        working-directory: ./frontend
        run: yarn

      - name: Download Go mods
        if: steps.golangcache.outputs.cache-hit != 'true'
        run: |
          go mod download
          go mod verify
          make test-deps

      - name: Build Frontend Statping
        run: make clean compile

      - name: Upload Compiled Frontend (rice-box.go)
        uses: actions/upload-artifact@v1
        with:
          name: static-rice-box
          path: ./source

      - name: Upload Assets to S3
        run: |
          tar -czvf source.tar.gz source/
          cp source.tar.gz source-${VERSION}.tar.gz
          aws s3 cp source.tar.gz s3://assets.statping.com/
          aws s3 cp source-${VERSION}.tar.gz s3://assets.statping.com/
          rm -rf source.tar.gz
          rm -rf source-${VERSION}.tar.gz
          aws s3 cp source/dist/css/ s3://assets.statping.com/css/ --recursive
          aws s3 cp source/dist/js/ s3://assets.statping.com/js/ --recursive
          aws s3 cp source/dist/scss/ s3://assets.statping.com/scss/ --recursive
          aws s3 cp install.sh s3://assets.statping.com/

  test:
    needs: compile
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: password123
          POSTGRES_DB: statping
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password123
          MYSQL_DATABASE: statping
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '1.14.2'
      - uses: actions/setup-node@v1
        with:
          node-version: '12.18.2'
      - uses: actions/checkout@v2

      - name: Install Global Dependencies
        run: npm install -g yarn sass newman cross-env wait-on @sentry/cli

      - name: Setting ENV's
        run: |
          echo "::add-path::$(go env GOPATH)/bin"
          echo "::add-path::/opt/hostedtoolcache/node/12.18.2/x64/bin"
          echo ::set-env name=VERSION::$(cat version.txt)
        shell: bash

      - name: Download Compiled Frontend (rice-box.go)
        uses: actions/download-artifact@v1
        with:
          name: static-rice-box
          path: ./source

      - name: Install Statping
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          make build certs
          chmod +x statping
          mv statping $(go env GOPATH)/bin/

      - name: Go Tests
        run: |
          go get gotest.tools/gotestsum
          gotestsum --no-summary=skipped --format dots -- -covermode=count -coverprofile=coverage.out -p=1 ./...
        env:
          VERSION: ${{ env.VERSION }}
          DB_CONN: sqlite3
          STATPING_DIR: ${{ github.workspace }}
          API_SECRET: demopassword123
          DISABLE_LOGS: false
          ALLOW_REPORTS: true
          COVERALLS: ${{ secrets.COVERALLS }}
          DISCORD_URL: ${{ secrets.DISCORD_URL }}
          EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
          EMAIL_OUTGOING: ${{ secrets.EMAIL_OUTGOING }}
          EMAIL_SEND_TO: ${{ secrets.EMAIL_SEND_TO }}
          EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
          MOBILE_ID: ${{ secrets.MOBILE_ID }}
          MOBILE_NUMBER: ${{ secrets.MOBILE_NUMBER }}
          PUSHOVER_TOKEN: ${{ secrets.PUSHOVER_TOKEN }}
          PUSHOVER_API: ${{ secrets.PUSHOVER_API }}
          SLACK_URL: ${{ secrets.SLACK_URL }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHANNEL: ${{ secrets.TELEGRAM_CHANNEL }}
          TWILIO_SID: ${{ secrets.TWILIO_SID }}
          TWILIO_SECRET: ${{ secrets.TWILIO_SECRET }}
          TWILIO_FROM: ${{ secrets.TWILIO_FROM }}
          TWILIO_TO: ${{ secrets.TWILIO_TO }}
          TEST_EMAIL: ${{ secrets.TEST_EMAIL }}
          GOTIFY_URL: ${{ secrets.GOTIFY_URL }}
          GOTIFY_TOKEN: ${{ secrets.GOTIFY_TOKEN }}
          DINGTALK_URL: ${{ secrets.DINGTALK_URL }}

      - name: Coveralls Testing Coverage
        run: |
          go get github.com/mattn/goveralls
          goveralls -coverprofile=coverage.out -repotoken $COVERALLS
        env:
          COVERALLS: ${{ secrets.COVERALLS }}

  test-postman-sqlite:
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.14.2'

      - name: Setting ENV's
        run: |
          echo "::add-path::$(go env GOPATH)/bin"
          echo "::add-path::/opt/hostedtoolcache/node/12.18.2/x64/bin"
          echo ::set-env name=VERSION::$(cat version.txt)
        shell: bash

      - name: Download Compiled Frontend (rice-box.go)
        uses: actions/download-artifact@v1
        with:
          name: static-rice-box
          path: ./source

      - name: Install Statping
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          make build
          chmod +x statping
          mv statping $(go env GOPATH)/bin/

      - name: Run Statping
        run: |
          API_SECRET=demosecret123 statping --port=8585 > /dev/null &
          sleep 5

      - name: Postman SQLite Tests
        uses: matt-ball/newman-action@master
        with:
          apiKey: ${{ secrets.POSTMAN_API }}
          collection: ./dev/postman.json
          environment: ./dev/postman_env_sqlite.json
          timeoutRequest: 30000
          delayRequest: 600

  test-postman-mysql:
    needs: compile
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password123
          MYSQL_DATABASE: statping
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.14.2'

      - name: Setting ENV's
        run: |
          echo "::add-path::$(go env GOPATH)/bin"
          echo "::add-path::/opt/hostedtoolcache/node/12.18.2/x64/bin"
          echo ::set-env name=VERSION::$(cat version.txt)
        shell: bash

      - name: Download Compiled Frontend (rice-box.go)
        uses: actions/download-artifact@v1
        with:
          name: static-rice-box
          path: ./source

      - name: Install Statping
        env:
          VERSION: ${{ env.VERSION }}
          MJML_APP: ${{ secrets.MJML_APP }}
          MJML_PRIVATE: ${{ secrets.MJML_PRIVATE }}
        run: |
          make build
          chmod +x statping
          mv statping $(go env GOPATH)/bin/

      - name: Run Statping
        run: |
          API_SECRET=demosecret123 statping --port=8585 > /dev/null &
          sleep 5

      - name: Postman MySQL Tests
        uses: matt-ball/newman-action@master
        with:
          apiKey: ${{ secrets.POSTMAN_API }}
          collection: ./dev/postman.json
          environment: ./dev/postman_env_mysql.json
          timeoutRequest: 30000
          delayRequest: 600

  test-postman-postgres:
    needs: compile
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: password123
          POSTGRES_DB: statping
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.14.2'

      - name: Setting ENV's
        run: |
          echo "::add-path::$(go env GOPATH)/bin"
          echo "::add-path::/opt/hostedtoolcache/node/12.18.2/x64/bin"
          echo ::set-env name=VERSION::$(cat version.txt)
        shell: bash

      - name: Download Compiled Frontend (rice-box.go)
        uses: actions/download-artifact@v1
        with:
          name: static-rice-box
          path: ./source

      - name: Install Statping
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          make build
          chmod +x statping
          mv statping $(go env GOPATH)/bin/

      - name: Run Statping
        run: |
          API_SECRET=demosecret123 statping --port=8585 > /dev/null &
          sleep 5

      - name: Postman Postgres Tests
        uses: matt-ball/newman-action@master
        with:
          apiKey: ${{ secrets.POSTMAN_API }}
          collection: ./dev/postman.json
          environment: ./dev/postman_env_postgres.json
          timeoutRequest: 30000
          delayRequest: 600

  build-binaries:
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '1.14.2'
      - uses: actions/checkout@v2

      - name: Install cross compiling libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y automake autogen build-essential ca-certificates libsqlite3-dev \
          gcc-5-arm-linux-gnueabi g++-5-arm-linux-gnueabi libc6-dev-armel-cross linux-headers-generic \
          gcc-5-arm-linux-gnueabihf g++-5-arm-linux-gnueabihf libc6-dev-armhf-cross            \
          gcc-5-aarch64-linux-gnu g++-5-aarch64-linux-gnu libc6-dev-arm64-cross                \
          gcc-5-mips-linux-gnu g++-5-mips-linux-gnu libc6-dev-mips-cross                       \
          gcc-5-mipsel-linux-gnu g++-5-mipsel-linux-gnu libc6-dev-mipsel-cross                 \
          gcc-5-mips64-linux-gnuabi64 g++-5-mips64-linux-gnuabi64 libc6-dev-mips64-cross       \
          gcc-5-mips64el-linux-gnuabi64 g++-5-mips64el-linux-gnuabi64 libc6-dev-mips64el-cross \
          gcc-5-multilib g++-5-multilib gcc-mingw-w64 g++-mingw-w64 clang llvm-dev             \
          gcc-6-arm-linux-gnueabi g++-6-arm-linux-gnueabi libc6-dev-armel-cross                \
          gcc-6-arm-linux-gnueabihf g++-6-arm-linux-gnueabihf libc6-dev-armhf-cross            \
          gcc-6-aarch64-linux-gnu g++-6-aarch64-linux-gnu libc6-dev-arm64-cross                \
          gcc-6-mips-linux-gnu g++-6-mips-linux-gnu libc6-dev-mips-cross                       \
          gcc-6-mipsel-linux-gnu g++-6-mipsel-linux-gnu libc6-dev-mipsel-cross                 \
          gcc-6-mips64-linux-gnuabi64 g++-6-mips64-linux-gnuabi64 libc6-dev-mips64-cross       \
          gcc-6-mips64el-linux-gnuabi64 g++-6-mips64el-linux-gnuabi64 libc6-dev-mips64el-cross \
          gcc-6-multilib gcc-7-multilib g++-6-multilib gcc-mingw-w64 g++-mingw-w64 clang llvm-dev \
          libtool libxml2-dev uuid-dev libssl-dev swig openjdk-8-jdk pkg-config patch \
          make xz-utils cpio wget zip unzip p7zip git mercurial bzr texinfo help2man cmake --no-install-recommends
          sudo ln -s /usr/include/asm-generic/ /usr/include/asm

      - name: Setting ENV's
        run: |
          echo "::add-path::$(go env GOPATH)/bin"
          echo "::add-path::/opt/hostedtoolcache/node/12.18.2/x64/bin"
          echo ::set-env name=VERSION::$(cat version.txt)
        shell: bash

      - name: Download Go mods
        run: |
          make test-deps

      - name: Download Compiled Frontend (rice-box.go)
        uses: actions/download-artifact@v1
        with:
          name: static-rice-box
          path: ./source

      - name: Build Binaries
        env:
          VERSION: ${{ env.VERSION }}
          COMMIT: $GITHUB_SHA
          MJML_APP: ${{ secrets.MJML_APP }}
          MJML_PRIVATE: ${{ secrets.MJML_PRIVATE }}
        run: make build-folders build-linux build-linux-arm build-darwin build-win compress-folders

      - name: Upload Builds
        uses: actions/upload-artifact@v1
        with:
          name: builds
          path: ./build

  upload-release:
    needs: [test, test-postman-sqlite, test-postman-mysql, test-postman-postgres, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setting ENV's
        run: |
          echo "::add-path::$(go env GOPATH)/bin"
          echo "::add-path::/opt/hostedtoolcache/node/12.18.2/x64/bin"
          echo ::set-env name=VERSION::$(cat version.txt)
        shell: bash

      - name: Download Builds
        uses: actions/download-artifact@v1
        with:
          name: builds
          path: ./builds

      - name: Upload Releases
        id: upload-assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.VERSION }}
        with:
          tag_name: v${{ env.VERSION }}
          draft: false
          prerelease: true
          files: |
            builds/statping-linux-386.tar.gz
            builds/statping-linux-amd64.tar.gz
            builds/statping-linux-arm6.tar.gz
            builds/statping-linux-arm7.tar.gz
            builds/statping-linux-arm64.tar.gz
            builds/statping-darwin-amd64.tar.gz
            builds/statping-darwin-386.tar.gz
            builds/statping-windows-386.zip
            builds/statping-windows-amd64.zip
            builds/statping-windows-arm.zip

  docker-release:
    needs: upload-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Statping Repo
        uses: actions/checkout@v2

      - name: Setting ENV's
        run: echo ::set-env name=VERSION::$(cat version.txt)
        shell: bash

      - name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v3

      - name: Docker Login
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USERNAME}" --password-stdin

      - name: Cache Docker layers
        uses: actions/cache@v2
        id: buildx-docker
        with:
          path: /tmp/.buildx-cache
          key: buildx-docker
          restore-keys: |
            buildx-docker

      - name: Docker Build :base
        env:
          VERSION: ${{ env.VERSION }}
          COMMIT: ${{ github.sha }}
        run: make buildx-base

      - name: Docker Build :lastest
        env:
          VERSION: ${{ env.VERSION }}
          COMMIT: ${{ github.sha }}
        run: make buildx-latest

  sentry-release:
    needs: upload-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Statping Repo
        uses: actions/checkout@v2

      - name: Setup Sentry CLI
        uses: mathrix-education/setup-sentry-cli@master
        with:
          version: latest
          url: ${{ secrets.SENTRY_URL }}
          token: ${{ secrets.SENTRY_AUTH_TOKEN }}
          organization: statping

      - name: Setting ENV's
        run: echo ::set-env name=VERSION::$(cat version.txt)
        shell: bash

      - name: Sentry Release
        run: make sentry-release

  homebrew-release:
    needs: upload-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Statping Repo
        uses: actions/checkout@v2

      - name: Setting ENV's
        run: echo ::set-env name=VERSION::$(cat version.txt)
        shell: bash

      - name: Update Homebrew Package
        env:
          VERSION: ${{ env.VERSION }}
          TRAVIS_API: ${{ secrets.TRAVIS_API }}
        run: make publish-homebrew

  slack-update:
    needs: upload-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Statping Repo
        uses: actions/checkout@v2

      - name: Setting ENV's
        run: echo ::set-env name=VERSION::$(cat version.txt)
        shell: bash

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_URL }}
          SLACK_CHANNEL: dev
          SLACK_USERNAME: StatpingDev
